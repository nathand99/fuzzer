#!/usr/bin/python3
import sys, os, glob
import json
import csv
from xml.etree import ElementTree
from modules import *

binary = sys.argv[1]
fuzzers = []
stopAtFirst = True
success = False

if not os.path.isfile(binary):
    exit("Couldn't find binary please use format: ./fuzzer <binary> [supplied input]")

if (len(sys.argv) > 2):
    try:
        suppliedInput = open(sys.argv[2])
        data, fileType = parseFile(suppliedInput) #Check modules/parser for doc on return

        print("Supplied input of type: {}".format(fileType))
        if fileType == 'csv':
            fuzzers = [csvFuzzer(binary, data, stopAtFirst)]
        elif fileType == 'json':
            fuzzers = [jsonFuzzer(binary, data, stopAtFirst)]
        elif fileType == 'xml':
            fuzzers = [xmlFuzzer(binary, data, stopAtFirst)]
        
        fuzzers.append(txtFuzzer(binary, suppliedInput.read(), stopAtFirst))
        
        suppliedInput.close()
        suppliedInput = open(sys.argv[2], "rb")
        fuzzers.append(binFuzzer(binary, suppliedInput.read(), stopAtFirst))
        suppliedInput.close()

    except Exception as e:
        print(e)
        fuzzers = []
        print("Couldn't read supplied input, continuing...")

fuzzers.append(randomFuzzer(binary, stopAtFirst))

#remove previous bad outputs
bads = glob.glob("bad*.txt")
for bad in bads:
    os.remove(bad)

for fuzzer in fuzzers:
    print("{:#^75}".format("Trying {}".format(fuzzer.name)))
    fuzzer.fuzz()
    if fuzzer.success:
        success = True
        print("{:+^75}".format("Crashed program with {}".format(fuzzer.name)))
        if stopAtFirst:
            break
    else:
        print("{:-^75}".format("Couldn't crash program with {}".format(fuzzer.name)))

if not success:
    print("Couldn't crash program :(")
else:
    print("Managed to crash program :)")
